generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("SQL_CONNECTION_STRING_ADMIN")
}

// NOTES
//
// use '//' comments for notes relevant to the schema
// use '///' comments for notes that should be included in the types definition
// see https://www.prisma.io/docs/concepts/components/prisma-schema#comments
//
// we use GUIDs for IDs (see https://learn.microsoft.com/en-us/sql/t-sql/data-types/uniqueidentifier-transact-sql?view=sql-server-ver16)
// this is because these IDs may be used in URLs and it makes them harder to guess
// while we don't rely on that for security, it adds an extra layer
// not everything needs this, but easier to make them all consistent and the increase in size (vs int) is negligible

/// CrownDevelopment represents a case in the system
model CrownDevelopment {
  /// internal identifier
  id                                  String                      @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  /// external identifier, shown to users as a unique reference
  reference                           String                      @unique
  createdDate                         DateTime                    @default(now())
  updatedDate                         DateTime?
  /// type of application, such as outline, extension
  typeId                              String
  Type                                ApplicationType             @relation(fields: [typeId], references: [id])
  // project description
  description                         String?                     @db.NVarChar(2000)
  /// LPA associated with this application
  lpaId                               String?                     @db.UniqueIdentifier
  Lpa                                 Lpa?                        @relation(fields: [lpaId], references: [id])
  applicantContactId                  String?                     @db.UniqueIdentifier
  ApplicantContact                    Contact?                    @relation("ApplicantContact", fields: [applicantContactId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  agentContactId                      String?                     @db.UniqueIdentifier
  AgentContact                        Contact?                    @relation("AgentContact", fields: [agentContactId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  /// Address of the site, if known
  siteAddressId                       String?                     @db.UniqueIdentifier
  SiteAddress                         Address?                    @relation(fields: [siteAddressId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  /// Easting of the site, if known
  siteEasting                         Int?
  /// Northing of the site, if known
  siteNorthing                        Int?
  /// Site area in hectares
  siteArea                            Decimal?
  /// Likely date of submission
  expectedDateOfSubmission            DateTime?
  /// internal (PINS) status for the application
  statusId                            String?
  Status                              ApplicationStatus?          @relation(fields: [statusId], references: [id])
  /// external (public) stage for the application
  stageId                             String?
  Stage                               ApplicationStage?           @relation(fields: [stageId], references: [id])
  nationallyImportant                 Boolean?
  nationallyImportantConfirmationDate DateTime?
  notNationallyImportantEmailSent     Boolean?                    @default(false)
  /// LPA cross reference
  lpaReference                        String?
  /// case category
  categoryId                          String?
  Category                            Category?                   @relation(fields: [categoryId], references: [id])
  isGreenBelt                         Boolean?
  healthAndSafetyIssue                String?                     @db.NVarChar(2000)
  applicationReceivedDate             DateTime?
  applicationReceivedDateEmailSent    Boolean?                    @default(false)
  applicationAcceptedDate             DateTime?
  lpaQuestionnaireSentDate            DateTime?
  lpaQuestionnaireReceivedDate        DateTime?
  lpaQuestionnaireReceivedEmailSent   Boolean?                    @default(false)
  /// the date the project is visible to the public
  publishDate                         DateTime?
  pressNoticeDate                     DateTime?
  neighboursNotifiedByLpaDate         DateTime?
  siteNoticeByLpaDate                 DateTime?
  targetDecisionDate                  DateTime?
  extendedTargetDecisionDate          DateTime?
  recoveredDate                       DateTime?
  recoveredReportSentDate             DateTime?
  withdrawnDate                       DateTime?
  decisionDate                        DateTime?
  /// if challenged, this field records the date of original decision
  originalDecisionDate                DateTime?
  decisionOutcomeId                   String?
  DecisionOutcome                     ApplicationDecisionOutcome? @relation(fields: [decisionOutcomeId], references: [id])
  turnedAwayDate                      DateTime?
  /// determines when representations are published to the public
  representationsPublishDate          DateTime?
  /// determines the start date for accepting representations
  representationsPeriodStartDate      DateTime?
  /// determines the end date for accepting representations - up to midnight
  representationsPeriodEndDate        DateTime?
  /// Entra ID
  inspector1Id                        String?
  /// Entra ID
  inspector2Id                        String?
  /// Entra ID
  inspector3Id                        String?
  /// Entra ID
  assessorInspectorId                 String?
  /// Entra ID
  caseOfficerId                       String?
  /// Entra ID
  planningOfficerId                   String?
  eiaScreening                        Boolean?
  eiaScreeningOutcome                 Boolean?
  environmentalStatementReceivedDate  DateTime?
  siteIsVisibleFromPublicLand         Boolean?
  procedureId                         String?
  Procedure                           ApplicationProcedure?       @relation(fields: [procedureId], references: [id])
  procedureNotificationDate           DateTime?
  eventId                             String?                     @db.UniqueIdentifier
  Event                               Event?                      @relation(fields: [eventId], references: [id])
  Representation                      Representation[]
  hasApplicationFee                   Boolean?
  applicationFee                      Decimal?
}

/// Address represents an address of a property or place
model Address {
  /// internal identifier
  id               String             @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  line1            String?
  line2            String?
  townCity         String?
  county           String?
  postcode         String?
  Contact          Contact[]
  Lpa              Lpa[]
  CrownDevelopment CrownDevelopment[]
}

/// Contact represents the details of a person or organisation
model Contact {
  /// internal identifier
  id                  String             @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  fullName            String?
  telephoneNumber     String?
  email               String?
  addressId           String?            @db.UniqueIdentifier
  Address             Address?           @relation(fields: [addressId], references: [id])
  isAdult             Boolean            @default(true)
  jobTitleOrRole      String?
  contactPreferenceId String?
  ContactPreference   ContactPreference? @relation(fields: [contactPreferenceId], references: [id])

  CrownDevelopmentApplicant        CrownDevelopment[] @relation("ApplicantContact")
  CrownDevelopmentAgent            CrownDevelopment[] @relation("AgentContact")
  RepresentationSubmittedByContact Representation[]   @relation("RepresentationSubmittedByContact")
  Representation                   Representation[]   @relation("RepresentedContact")
}

/// Lpa represents a Local Planning Authority
model Lpa {
  /// internal identifier
  id   String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  name String

  // contact details
  email           String?
  telephoneNumber String?
  addressId       String?  @db.UniqueIdentifier
  Address         Address? @relation(fields: [addressId], references: [id])

  /// Horizon LPA identifier
  pinsCode         String?
  /// ONS LPA identifier
  onsCode          String?
  CrownDevelopment CrownDevelopment[]
}

/// Event represents an event in relation to an application, such as a hearing or an inquiry
model Event {
  /// internal identifier
  id                           String             @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  date                         DateTime?
  duration                     String?
  venue                        String?
  notificationDate             DateTime?
  issuesReportPublishedDate    DateTime?
  statementsDate               DateTime?
  caseManagementConferenceDate DateTime?
  proofsOfEvidenceDate         DateTime?
  CrownDevelopment             CrownDevelopment[]
}

/// Representation represents a comment made by an external party on an application
model Representation {
  /// internal identifier
  id            String                @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  reference     String                @unique
  /// the application this representation relates to
  applicationId String                @db.UniqueIdentifier
  Application   CrownDevelopment      @relation(fields: [applicationId], references: [id])
  statusId      String
  Status        RepresentationStatus? @relation(fields: [statusId], references: [id])

  // common fields
  submittedForId          String
  SubmittedFor            RepresentationSubmittedFor? @relation(fields: [submittedForId], references: [id])
  submittedByContactId    String?                     @db.UniqueIdentifier
  SubmittedByContact      Contact?                    @relation("RepresentationSubmittedByContact", fields: [submittedByContactId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  submittedByAgent        Boolean?
  submittedByAgentOrgName String?
  submittedDate           DateTime

  comment         String  @db.NVarChar(MAX)
  commentRedacted String? @db.NVarChar(MAX)

  // submitting as agent/on behalf of fields
  // can be a person/org/group
  representedTypeId    String?
  RepresentedType      RepresentedType? @relation(fields: [representedTypeId], references: [id])
  representedContactId String?          @db.UniqueIdentifier
  RepresentedContact   Contact?         @relation("RepresentedContact", fields: [representedContactId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  // internal fields
  categoryId     String?
  Category       RepresentationCategory? @relation(fields: [categoryId], references: [id])
  wantsToBeHeard Boolean?

  containsAttachments     Boolean? @default(false)
  sharePointFolderCreated Boolean? @default(false)
}

// reference data

/// ApplicationDecisionOutcome represents the possible outcomes of an application
model ApplicationDecisionOutcome {
  /// unique machine-readable name, not generated, e.g. "approved"
  id               String             @id
  displayName      String?
  CrownDevelopment CrownDevelopment[]
}

/// ApplicationType represents types of applications we recieve
model ApplicationType {
  /// unique machine-readable name, not generated, e.g. "change-of-use"
  id               String             @id
  displayName      String?
  CrownDevelopment CrownDevelopment[]
}

/// ApplicationStatus represents the status an application can be in
model ApplicationStatus {
  /// unique machine-readable name, not generated, e.g. "new"
  id               String             @id
  displayName      String?
  CrownDevelopment CrownDevelopment[]
}

/// ApplicationStage represents the stages an application can be in
model ApplicationStage {
  /// unique machine-readable name, not generated, e.g. "acceptance"
  id               String             @id
  displayName      String?
  CrownDevelopment CrownDevelopment[]
}

/// ApplicationProcedure represents the procedure type an application will follow
model ApplicationProcedure {
  /// unique machine-readable name, not generated, e.g. "inquiry"
  id               String             @id
  displayName      String?
  CrownDevelopment CrownDevelopment[]
}

/// Category represents a hierarchy of categories that may apply to an application
model Category {
  /// unique machine-readable name, not generated, e.g. "change-of-use"
  id               String             @id
  displayName      String?
  parentCategoryId String?
  ParentCategory   Category?          @relation("Parent", fields: [parentCategoryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Category         Category[]         @relation("Parent")
  CrownDevelopment CrownDevelopment[]
}

/// ContactPreference represents the preferred method of contact for a contact
model ContactPreference {
  /// unique machine-readable name, not generated, e.g. "email"
  id          String    @id
  displayName String?
  Contact     Contact[]
}

/// RepresentationCategory represents the options for categories such as 'stat con','member of the public', etc..
model RepresentationCategory {
  /// unique machine-readable name, not generated, e.g. "public"
  id             String           @id
  displayName    String?
  Representation Representation[]
}

/// RepresentationSubmittedFor represents the options for who a representation has been made for
model RepresentationSubmittedFor {
  /// unique machine-readable name, not generated, e.g. "myself"
  id             String           @id
  displayName    String?
  Representation Representation[]
}

/// RepresentationStatus represents the status of representation e.g. accepted/rejected
model RepresentationStatus {
  /// unique machine-readable name, not generated, e.g. "accepted"
  id             String           @id
  displayName    String?
  Representation Representation[]
}

/// RepresentedType represents the type of representation when acting as an agent i.e. whether person/org/group
model RepresentedType {
  /// unique machine-readable name, not generated, e.g. "person"
  id             String           @id
  displayName    String?
  Representation Representation[]
}
